import logging
import openai
from telegram.ext import CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater

# Уибираем логирование на уровне Info и ниже уровней
logging.basicConfig(level=logging.WARNING,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# Задаем API-ключ OpenAI
openai.api_key = 'API-ключ'

# Инициализируем переменные для работы бота
users = {}
admin_id = [123456789, 987654321]

# Функция reply_with_api() запускает OpenAI API, чтобы полу��ить ответ на текстовый запрос пользователей
def reply_with_api(update, context):
    message = update.message.text
    chat_id = update.message.chat_id
    if chat_id in users:
        response = openai.Completion.create(
            engine="engine-id",
            prompt=f"{message}",
            max_tokens=50
        )
        context.bot.send_message(chat_id=chat_id, text=response.choices[0].text)
    else:
        context.bot.send_message(chat_id=chat_id, text='No access granted.')

# Функция handle_start_command() генерирует приветственное сообщение и предоставляет доступ к клавиатуре для запроса доступа
def handle_start_command(update, context):
    chat_id = update.message.chat_id
    global users
    users[chat_id] = False
    context.bot.send_message(chat_id=chat_id, text='Hello, please enter your message. To access OpenAI API, request access.',
                             reply_markup=telegram_reply_markup())

# Функция send_access_request() отправляет запрос администратору для предоставления пользователю доступа
def send_access_request(update, context):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    if user_id in admin_id:
        global users
        users[chat_id] = False
        try:
            context.bot.send_message(chat_id=chat_id, text='Request sent.')
            context.bot.send_message(chat_id=admin_id[0], text=f'Request for access from user id: {user_id}')
        except:
            context.bot.send_message(chat_id=admin_id[0], text='Failed to send request.')
    else:
        context.bot.send_message(chat_id=chat_id, text='Access denied.')      

# Функция access_request_accepted() высласывает пользователю сообщение с просьбой написать в OpenAI
def access_request_accepted(update, context):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    if user_id in admin_id:
        chat_id = query.message.chat_id
        global users
        users[chat_id] = True
        context.bot.send_message(chat_id=chat_id, text='Access granted! Write something interesting to OpenAI.')
    else:
        query.answer('Access denied.')
        
# Функция telegram_reply_markup() генерирует клавиатуру для запроса доступа
def telegram_reply_markup():
    keyboard = [[InlineKeyboardButton("Request Access", callback_data='request_access')]]
    return InlineKeyboardMarkup(keyboard)

# Функция handle_chatbotui_command() принимает запрос на общение из ChatBotUI и запускает OpenAI API для пол��чения ответа
def handle_chatbotui_command(update, context):
    query = update.callback_query
    query.answer()
    message = query.message.text
    chat_id = query.message.chat_id
    if chat_id in users:
        response = openai.Completion.create(
            engine="engine-id",
            prompt=f"{message}",
            max_tokens=2048
        )
        context.bot.send_message(chat_id=chat_id, text=response.choices[0].text)
    else:
        context.bot.send_message(chat_id=chat_id, text='No access granted.')

# Функция for generating a keyboard
def chatbotui_reply_keyboard():
    keyboard = [[InlineKeyboardButton("Positivity", callback_data='Positivity'), InlineKeyboardButton("Creativity", callback_data='Creativity')],
                [InlineKeyboardButton("Introduction", callback_data='Introduction'), InlineKeyboardButton("Dance", callback_data='Dance')],
                [InlineKeyboardButton("Cooking", callback_data='Cooking'), InlineKeyboardButton("Poetry", callback_data='Poetry')],
                [InlineKeyboardButton("Jokes", callback_data='Jokes'), InlineKeyboardButton("Music", callback_data='Music')],
                [InlineKeyboardButton("Quotes", callback_data='Quotes'), InlineKeyboardButton("Movies", callback_data='Movies')],
                [InlineKeyboardButton("Random", callback_data='Random')]]
    return InlineKeyboardMarkup(keyboard)

# Функция handle_chatbotui_reply() отправляет запрос в ChatBotUI API и выводит ответ в чат
def handle_chatbotui_reply(update, context):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    message = query.data
    chat_id = query.message.chat_id
    if chat_id in users:
        response = openai.Completion.create(
            engine="engine-id", # замените на id вашего OpenAI engine
            prompt=f"User: {user_id}\nBot: {message}\n",
            max_tokens=50
        )
        context.bot.send_message(chat_id=chat_id, text=response.choices[0].text)
    else:
        context.bot.send_message(chat_id=chat_id, text='No access granted.')

# Создаем updater и dispatcher и привязываем команды к обработчикам
updater = Updater(token='BOT-TOKEN', use_context=True)
dispatcher = updater.dispatcher

dispatcher.add_handler(CommandHandler('start', handle_start_command))
dispatcher.add_handler(MessageHandler(Filters.text, reply_with_api))
dispatcher.add_handler(CallbackQueryHandler(send_access_request, pattern='request_access'))
dispatcher.add_handler(CallbackQueryHandler(access_request_accepted, pattern='^Access granted!$'))
dispatcher.add_handler(CommandHandler('chatbotui', handle_chatbotui_command))
dispatcher.add_handler(CallbackQueryHandler(handle_chatbotui_reply))

updater.start_polling()
updater.idle()
